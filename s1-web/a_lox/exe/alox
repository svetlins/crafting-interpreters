#!/usr/bin/env ruby
require "a_lox"
require "readline"

module ALox
  class PersistentSession
    def initialize
      @vm = VM.new(error_reporter: self)
      @executable_container = ExecutableContainer.new
    end

    def execute(source)
      @had_error = false

      tokens = Scanner.new(source, error_reporter: self).scan
      ast = Parser.new(tokens, error_reporter: self).parse

      return if @had_error

      phase1 = StaticResolver::Phase1.new(error_reporter: self)
      phase2 = StaticResolver::Phase2.new(error_reporter: self)
      phase1.resolve(ast)
      phase2.resolve(ast)

      return if @had_error

      Compiler.new(ast, @executable_container).compile

      return if @had_error

      @vm.execute(@executable_container)
    end

    def report_scanner_error(line, message)
      warn "scanner error. line: #{line} - error: #{message}"
      @had_error = true
    end

    def report_parser_error(token, message)
      if token.type == TokenTypes::EOF
        warn "parser error. line: #{token.line} at end - error: #{message}"
      else
        warn "parser error. line: #{token.line}, token: #{token.lexeme} - error: #{message}"
      end

      @had_error = true
    end

    def report_static_analysis_error(token, message)
      warn "static analysis error. line: #{token.line} - error: #{message}"
      @had_error = true
    end

    def report_runtime_error(message)
      warn "runtime error: #{message}"
      @had_error = true
    end
  end
end


begin
  session = ALox::PersistentSession.new

  buffer = ""

  Readline.pre_input_hook = lambda do
    Readline.insert_text("  " * [buffer.count("{") - buffer.count("}"), 0].max)
    Readline.redisplay
  end

  while (line = Readline.readline(buffer.empty? ? "> " : "| ", true)&.chomp)
    if line.empty?
      session.execute(buffer)
      buffer = ""
    else
      buffer += line
    end
  end

  puts "ğŸ‘‹"
rescue Interrupt
  puts
  retry
end
