#!/usr/bin/env ruby
require "a_lox"
require "readline"

WELCOME_MESSAGE = <<~WELCOME
  Variables:
    var foo;
    var foo = 42;

  Output:
    print foo;
    print foo * foo;

  Conditional:
    if (69 > 42) {
      print "69 is greater than 42";
    } else {
      print "69 is not greater than 42";
    }

 While loop:
    while (x < 10) {
      print (x + 5) * x;
    }

  For loop;
    for (var i = 0; i < 10; i = i + i) {
      print i;
    }

  Functions:
    fun fn(n) {
      return n * n;
    }

  Closures:
    fun makeCounter() {
      var count = 0;

      fun counter() {
        count = count + 1;
        return count - 1;
      }

      return counter;
    }
WELCOME

module ALox
  class PersistentSession
    attr_reader :had_error

    def initialize
      @vm = VM.new(error_reporter: self)
      @executable_container = ExecutableContainer.new
    end

    def compile(source, debug:)
      @had_error = false

      tokens = Scanner.new(source, error_reporter: self).scan
      ast = Parser.new(tokens, error_reporter: self).parse

      return if @had_error

      StaticResolver::Upvalues.new(error_reporter: self).resolve(ast)

      return if @had_error

      Compiler.new(ast, @executable_container).compile

      return if @had_error

      @executable_container
    end

    def execute(source, debug:)
      compile(source, debug: debug)

      return if @had_error

      @vm.execute(@executable_container, debug: debug)
    end

    def report_scanner_error(line, message)
      warn "scanner error. line: #{line} - error: #{message}"
      @had_error = true
    end

    def report_parser_error(token, message)
      if token.type == TokenTypes::EOF
        warn "parser error. line: #{token.line} at end - error: #{message}"
      else
        warn "parser error. line: #{token.line}, token: #{token.lexeme} - error: #{message}"
      end

      @had_error = true
    end

    def report_static_analysis_error(token, message)
      warn "static analysis error. line: #{token.line} - error: #{message}"
      @had_error = true
    end

    def report_runtime_error(message)
      warn "runtime error: #{message}"
      @had_error = true
    end
  end
end

def repl
  puts WELCOME_MESSAGE

  session = ALox::PersistentSession.new

  buffer = ""

  debug_mode = false

  Readline.pre_input_hook = lambda do
    Readline.insert_text("  " * [buffer.count("{") - buffer.count("}"), 0].max)
    Readline.redisplay
  end

  while (line = Readline.readline(buffer.empty? ? "> " : "| ", true)&.chomp)
    if line == '\debug'
      debug_mode = !debug_mode
      puts "Debug #{debug_mode ? "on" : "off"}"
    elsif line.empty?
      session.execute(buffer, debug: debug_mode)
      buffer = ""
    else
      buffer += line
    end
  end

  puts "ðŸ‘‹"
rescue Interrupt
  puts
  retry
end

if ARGV.size == 2 && ARGV[0] == "-c"
  require "json"

  session = ALox::PersistentSession.new
  executable = session.compile(File.read(ARGV.last), debug: false)

  if session.had_error
    exit(1)
  else
    puts executable.serialize.to_json
  end
elsif ARGV.size == 1
  session = ALox::PersistentSession.new
  session.execute(File.read(ARGV.first))
  exit(session.had_error ? 1 : 0)
elsif ARGV.size == 0
  repl
else
  puts "Usage: alox [source_file]"
  exit(1)
end
