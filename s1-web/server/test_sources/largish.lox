fun makeRect(x, y, w, h) {
  var area = w * h;

  fun rect(field) {
    if (field == "area") {
      return area;
    } else if (field == "circumference") {
      return 2 * w + 2 * h;
    } else return -1;
  }

  return rect;
}

var aRect = makeRect(0, 20, 10, 20);

assert(aRect("area") == 200, "Closure method 1");
assert(aRect("circumference") == 60, "Closure method 2");

var x = 2;
var whileAcc = 1;

while (x > 0) {
  whileAcc = whileAcc * 2;
  x = x - 1;
}

assert(whileAcc == 4, "While");

var forAcc = 1;

for(var y = 2; y > 0; y = y - 1) forAcc = forAcc * 2;
assert(whileAcc == 4, "For");

{
  var a = 10;

  {
    var a = 20;

    {
      var a = 30;
      assert(a == 30, "Var shadowing 1");
    }
    assert(a == 20, "Var shadowing 2");
  }
  assert(a == 10, "Var shadowing 3");
}

class Dog {
  bark(loudness) {
    if (loudness > 5) {
      return "BARK";
    } else {
      return "Bark";
    }
  }
}

assert(Dog == Dog, "Class identity");
assert(Dog() != Dog(), "Instance identity");

var aDog = Dog();

aDog.color = "golden";
aDog.friend = Dog();
aDog.friend.color = "black";

assert(aDog.color = "golden", "Setter");
assert(aDog.friend.color = "black", "Nested setter");

assert(aDog.bark(1) == "Bark", "Method 1");
assert(aDog.friend.bark(1) == "Bark", "Nested method 2");
assert(aDog.friend.bark(10) == "BARK", "Nested method 2");

class SelfAwareDog {
  beautyFactor() {
    if (this.color == "golden") return "very beautiful";
    else return "so so";
  }
}

var aSelfAwareDog = SelfAwareDog();
aSelfAwareDog.color = "golden";
assert(aSelfAwareDog.beautyFactor() == "very beautiful", "Method this 1");
aSelfAwareDog.color = "purple";
assert(aSelfAwareDog.beautyFactor() == "so so", "Method this 2");


class Cat {
  init(size) {
    this.size = size;
  }

  introduce() {
    return "Hi, I'm cat and I have size " + this.size;
  }
}

var aCat = Cat("big");

assert(aCat.size == "big", "Initializer");
assert(aCat.init("big") == aCat, "Initializer reentrant");
